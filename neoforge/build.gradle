plugins {
	id "com.github.johnrengelman.shadow" version "7.0.0"
}

architectury {
	platformSetupLoomIde()
	neoForge()
}

configurations {
	common
	shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
	compileClasspath.extendsFrom common
	runtimeClasspath.extendsFrom common
	developmentNeoForge.extendsFrom common
}

dependencies {
	neoForge "net.neoforged:neoforge:${rootProject.neoforge_version}"

	common(project(path: ":common", configuration: "namedElements")) { transitive false }
	shadowCommon(project(path: ":common", configuration: "transformProductionNeoForge")) { transitive = false }

	minecraft "com.mojang:minecraft:${rootProject.minecraft_version}"
	mappings loom.officialMojangMappings()

	implementation "org.xerial:sqlite-jdbc:3.47.0.0"
	shadowCommon "org.xerial:sqlite-jdbc:3.47.0.0"
}

processResources {
	inputs.property "version", project.version

	filesMatching("META-INF/neoforge.mods.toml") {
		expand (
				[
						"version": project.version,
						"minecraft_version": project.minecraft_version,
						"neoforge_version": project.neoforge_version
				]
		)
	}
}

shadowJar {
	exclude "fabric.mod.json"

	configurations = [project.configurations.shadowCommon]
	archiveClassifier = "dev-shadow"
}

remapJar {
	input.set shadowJar.archiveFile
	dependsOn shadowJar
	archiveClassifier = "neoforge"
}

jar {
	archiveClassifier = "dev"
}

sourcesJar {
	def commonSources = project(":common").sourcesJar
	dependsOn commonSources
	from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
	withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
		skip()
	}
}

publishing {
	publications {
		mavenForge(MavenPublication) {
			artifactId = rootProject.archives_base_name + "-" + project.name
			from components.java
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
	}
}

tasks.register('cleanJar', Delete) {
	delete fileTree('../dist') {
		include "*-neoforge.jar"
	}
}

tasks.register('copyJar', Copy) {
	from remapJar
	into '../dist'
}

build.dependsOn copyJar
copyJar.dependsOn cleanJar
